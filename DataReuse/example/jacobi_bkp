/**
 * This is a parallel code with collapsed loops
 */

#include <stdio.h>
#include <omp.h>
#include <stdlib.h>
#include <math.h>

int main(int argc, char**argv) {
    int iter_max = 5000;
    int iter;
    double err = 1.0;
    double tol = 0.0000000001;
    int m = (argc > 1 ? atoi(argv[1]) : 500);
    int n = (argc > 1 ? atoi(argv[1]) : 500);
    double A[m][n];
    double Anew[m][n];
    double alpha = 0.0543;

    int i, j;

    for (i=0; i<m; i++){
        for (j=0; j<n; j++){
            A[j][i] = (rand()%3) * alpha;
        }
    }

    iter = 0;

    while (err>tol && iter<iter_max) {
        err=0.0;
        #pragma omp target teams distribute parallel for reduction(max:err) collapse(2)
        for(i=1; i<n-1; i++) {
            for( j = 1; j < m - 1; j++) {
                Anew[i][j] = 0.25 * (A[i][j+1] + A[i][j-1] + A[i-1][j] + A[i+1][j]);
                if(err < fabs(Anew[i][j] - A[i][j]))
                    err = fabs(Anew[i][j] - A[i][j]);
            }
        }

        #pragma omp target teams distribute parallel for collapse(2)
        for(i=1; i<n-1; i++) {
            for(j=1; j<m-1; j++) {
                int xl;
                A[i][j] = Anew[i][j];      
            }
        }
        iter++;
    }
    return 0;
}
